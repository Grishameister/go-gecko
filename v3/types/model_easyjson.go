// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types(in *jlexer.Lexer, out *coinBaseStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types(out *jwriter.Writer, in coinBaseStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v coinBaseStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v coinBaseStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *coinBaseStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *coinBaseStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types1(in *jlexer.Lexer, out *TickerItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "base":
			out.Base = string(in.String())
		case "target":
			out.Target = string(in.String())
		case "market":
			easyjsonC80ae7adDecode(in, &out.Market)
		case "last":
			out.Last = float64(in.Float64())
		case "converted_last":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ConvertedLast = make(map[string]float64)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 float64
					v1 = float64(in.Float64())
					(out.ConvertedLast)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "volume":
			out.Volume = float64(in.Float64())
		case "converted_volume":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ConvertedVolume = make(map[string]float64)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 float64
					v2 = float64(in.Float64())
					(out.ConvertedVolume)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "timestamp":
			out.Timestamp = string(in.String())
		case "is_anomaly":
			out.IsAnomaly = bool(in.Bool())
		case "is_stale":
			out.IsStale = bool(in.Bool())
		case "coin_id":
			out.CoinID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types1(out *jwriter.Writer, in TickerItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"base\":"
		out.RawString(prefix[1:])
		out.String(string(in.Base))
	}
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		out.String(string(in.Target))
	}
	{
		const prefix string = ",\"market\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncode(out, in.Market)
	}
	{
		const prefix string = ",\"last\":"
		out.RawString(prefix)
		out.Float64(float64(in.Last))
	}
	{
		const prefix string = ",\"converted_last\":"
		out.RawString(prefix)
		if in.ConvertedLast == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.ConvertedLast {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				out.Float64(float64(v3Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"volume\":"
		out.RawString(prefix)
		out.Float64(float64(in.Volume))
	}
	{
		const prefix string = ",\"converted_volume\":"
		out.RawString(prefix)
		if in.ConvertedVolume == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.ConvertedVolume {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.Float64(float64(v4Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"is_anomaly\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAnomaly))
	}
	{
		const prefix string = ",\"is_stale\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsStale))
	}
	{
		const prefix string = ",\"coin_id\":"
		out.RawString(prefix)
		out.String(string(in.CoinID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TickerItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TickerItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TickerItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TickerItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types1(l, v)
}
func easyjsonC80ae7adDecode(in *jlexer.Lexer, out *struct {
	Name             string `json:"name"`
	Identifier       string `json:"identifier"`
	TradingIncentive bool   `json:"has_trading_incentive"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "has_trading_incentive":
			out.TradingIncentive = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode(out *jwriter.Writer, in struct {
	Name             string `json:"name"`
	Identifier       string `json:"identifier"`
	TradingIncentive bool   `json:"has_trading_incentive"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix)
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"has_trading_incentive\":"
		out.RawString(prefix)
		out.Bool(bool(in.TradingIncentive))
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types2(in *jlexer.Lexer, out *StatusUpdateItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "user":
			out.User = string(in.String())
		case "user_title":
			out.UserTitle = string(in.String())
		case "pin":
			out.Pin = bool(in.Bool())
		case "project":
			(out.Project).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types2(out *jwriter.Writer, in StatusUpdateItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"user_title\":"
		out.RawString(prefix)
		out.String(string(in.UserTitle))
	}
	{
		const prefix string = ",\"pin\":"
		out.RawString(prefix)
		out.Bool(bool(in.Pin))
	}
	{
		const prefix string = ",\"project\":"
		out.RawString(prefix)
		(in.Project).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatusUpdateItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatusUpdateItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatusUpdateItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatusUpdateItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types2(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types3(in *jlexer.Lexer, out *SparklineItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				in.Delim('[')
				if out.Price == nil {
					if !in.IsDelim(']') {
						out.Price = make([]float64, 0, 8)
					} else {
						out.Price = []float64{}
					}
				} else {
					out.Price = (out.Price)[:0]
				}
				for !in.IsDelim(']') {
					var v5 float64
					v5 = float64(in.Float64())
					out.Price = append(out.Price, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types3(out *jwriter.Writer, in SparklineItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		if in.Price == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Price {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v7))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SparklineItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SparklineItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SparklineItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SparklineItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types3(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types4(in *jlexer.Lexer, out *ROIItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "times":
			out.Times = float64(in.Float64())
		case "currency":
			out.Currency = string(in.String())
		case "percentage":
			out.Percentage = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types4(out *jwriter.Writer, in ROIItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"times\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Times))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"percentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.Percentage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ROIItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ROIItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ROIItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ROIItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types4(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types5(in *jlexer.Lexer, out *PublicInterestItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alexa_rank":
			out.AlexaRank = uint(in.Uint())
		case "bing_matches":
			out.BingMatches = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types5(out *jwriter.Writer, in PublicInterestItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alexa_rank\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.AlexaRank))
	}
	{
		const prefix string = ",\"bing_matches\":"
		out.RawString(prefix)
		out.Uint(uint(in.BingMatches))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PublicInterestItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublicInterestItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublicInterestItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublicInterestItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types5(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types6(in *jlexer.Lexer, out *PriceChangePercentage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PCP1h":
			out.PCP1h = string(in.String())
		case "PCP24h":
			out.PCP24h = string(in.String())
		case "PCP7d":
			out.PCP7d = string(in.String())
		case "PCP14d":
			out.PCP14d = string(in.String())
		case "PCP30d":
			out.PCP30d = string(in.String())
		case "PCP200d":
			out.PCP200d = string(in.String())
		case "PCP1y":
			out.PCP1y = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types6(out *jwriter.Writer, in PriceChangePercentage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PCP1h\":"
		out.RawString(prefix[1:])
		out.String(string(in.PCP1h))
	}
	{
		const prefix string = ",\"PCP24h\":"
		out.RawString(prefix)
		out.String(string(in.PCP24h))
	}
	{
		const prefix string = ",\"PCP7d\":"
		out.RawString(prefix)
		out.String(string(in.PCP7d))
	}
	{
		const prefix string = ",\"PCP14d\":"
		out.RawString(prefix)
		out.String(string(in.PCP14d))
	}
	{
		const prefix string = ",\"PCP30d\":"
		out.RawString(prefix)
		out.String(string(in.PCP30d))
	}
	{
		const prefix string = ",\"PCP200d\":"
		out.RawString(prefix)
		out.String(string(in.PCP200d))
	}
	{
		const prefix string = ",\"PCP1y\":"
		out.RawString(prefix)
		out.String(string(in.PCP1y))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriceChangePercentage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriceChangePercentage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriceChangePercentage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriceChangePercentage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types6(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types7(in *jlexer.Lexer, out *OrderType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MarketCapDesc":
			out.MarketCapDesc = string(in.String())
		case "MarketCapAsc":
			out.MarketCapAsc = string(in.String())
		case "GeckoDesc":
			out.GeckoDesc = string(in.String())
		case "GeckoAsc":
			out.GeckoAsc = string(in.String())
		case "VolumeAsc":
			out.VolumeAsc = string(in.String())
		case "VolumeDesc":
			out.VolumeDesc = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types7(out *jwriter.Writer, in OrderType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MarketCapDesc\":"
		out.RawString(prefix[1:])
		out.String(string(in.MarketCapDesc))
	}
	{
		const prefix string = ",\"MarketCapAsc\":"
		out.RawString(prefix)
		out.String(string(in.MarketCapAsc))
	}
	{
		const prefix string = ",\"GeckoDesc\":"
		out.RawString(prefix)
		out.String(string(in.GeckoDesc))
	}
	{
		const prefix string = ",\"GeckoAsc\":"
		out.RawString(prefix)
		out.String(string(in.GeckoAsc))
	}
	{
		const prefix string = ",\"VolumeAsc\":"
		out.RawString(prefix)
		out.String(string(in.VolumeAsc))
	}
	{
		const prefix string = ",\"VolumeDesc\":"
		out.RawString(prefix)
		out.String(string(in.VolumeDesc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types7(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types8(in *jlexer.Lexer, out *MarketDataItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "current_price":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.CurrentPrice = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 float64
					v8 = float64(in.Float64())
					(out.CurrentPrice)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "roi":
			if in.IsNull() {
				in.Skip()
				out.ROI = nil
			} else {
				if out.ROI == nil {
					out.ROI = new(ROIItem)
				}
				(*out.ROI).UnmarshalEasyJSON(in)
			}
		case "ath":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ATH = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 float64
					v9 = float64(in.Float64())
					(out.ATH)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ath_change_percentage":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ATHChangePercentage = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 float64
					v10 = float64(in.Float64())
					(out.ATHChangePercentage)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ath_date":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ATHDate = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 string
					v11 = string(in.String())
					(out.ATHDate)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		case "atl":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ATL = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 float64
					v12 = float64(in.Float64())
					(out.ATL)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		case "atl_change_percentage":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ATLChangePercentage = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 float64
					v13 = float64(in.Float64())
					(out.ATLChangePercentage)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "atl_date":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ATLDate = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 string
					v14 = string(in.String())
					(out.ATLDate)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "market_cap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MarketCap = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 float64
					v15 = float64(in.Float64())
					(out.MarketCap)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		case "market_cap_rank":
			out.MarketCapRank = uint16(in.Uint16())
		case "total_volume":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TotalVolume = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 float64
					v16 = float64(in.Float64())
					(out.TotalVolume)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		case "high_24h":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.High24 = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v17 float64
					v17 = float64(in.Float64())
					(out.High24)[key] = v17
					in.WantComma()
				}
				in.Delim('}')
			}
		case "low_24h":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Low24 = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v18 float64
					v18 = float64(in.Float64())
					(out.Low24)[key] = v18
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_24h":
			out.PriceChange24h = float64(in.Float64())
		case "price_change_percentage_24h":
			out.PriceChangePercentage24h = float64(in.Float64())
		case "price_change_percentage_7d":
			out.PriceChangePercentage7d = float64(in.Float64())
		case "price_change_percentage_14d":
			out.PriceChangePercentage14d = float64(in.Float64())
		case "price_change_percentage_30d":
			out.PriceChangePercentage30d = float64(in.Float64())
		case "price_change_percentage_60d":
			out.PriceChangePercentage60d = float64(in.Float64())
		case "price_change_percentage_200d":
			out.PriceChangePercentage200d = float64(in.Float64())
		case "price_change_percentage_1y":
			out.PriceChangePercentage1y = float64(in.Float64())
		case "market_cap_change_24h":
			out.MarketCapChange24h = float64(in.Float64())
		case "market_cap_change_percentage_24h":
			out.MarketCapChangePercentage24h = float64(in.Float64())
		case "price_change_24h_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChange24hInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 float64
					v19 = float64(in.Float64())
					(out.PriceChange24hInCurrency)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_1h_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage1hInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v20 float64
					v20 = float64(in.Float64())
					(out.PriceChangePercentage1hInCurrency)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_24h_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage24hInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 float64
					v21 = float64(in.Float64())
					(out.PriceChangePercentage24hInCurrency)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_7d_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage7dInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v22 float64
					v22 = float64(in.Float64())
					(out.PriceChangePercentage7dInCurrency)[key] = v22
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_14d_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage14dInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v23 float64
					v23 = float64(in.Float64())
					(out.PriceChangePercentage14dInCurrency)[key] = v23
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_30d_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage30dInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v24 float64
					v24 = float64(in.Float64())
					(out.PriceChangePercentage30dInCurrency)[key] = v24
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_60d_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage60dInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v25 float64
					v25 = float64(in.Float64())
					(out.PriceChangePercentage60dInCurrency)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_200d_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage200dInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v26 float64
					v26 = float64(in.Float64())
					(out.PriceChangePercentage200dInCurrency)[key] = v26
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_1y_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage1yInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v27 float64
					v27 = float64(in.Float64())
					(out.PriceChangePercentage1yInCurrency)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		case "market_cap_change_24h_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MarketCapChange24hInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v28 float64
					v28 = float64(in.Float64())
					(out.MarketCapChange24hInCurrency)[key] = v28
					in.WantComma()
				}
				in.Delim('}')
			}
		case "market_cap_change_percentage_24h_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MarketCapChangePercentage24hInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v29 float64
					v29 = float64(in.Float64())
					(out.MarketCapChangePercentage24hInCurrency)[key] = v29
					in.WantComma()
				}
				in.Delim('}')
			}
		case "total_supply":
			if in.IsNull() {
				in.Skip()
				out.TotalSupply = nil
			} else {
				if out.TotalSupply == nil {
					out.TotalSupply = new(float64)
				}
				*out.TotalSupply = float64(in.Float64())
			}
		case "circulating_supply":
			out.CirculatingSupply = float64(in.Float64())
		case "sparkline_7d":
			if in.IsNull() {
				in.Skip()
				out.Sparkline = nil
			} else {
				if out.Sparkline == nil {
					out.Sparkline = new(SparklineItem)
				}
				(*out.Sparkline).UnmarshalEasyJSON(in)
			}
		case "last_updated":
			out.LastUpdated = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types8(out *jwriter.Writer, in MarketDataItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"current_price\":"
		out.RawString(prefix[1:])
		if in.CurrentPrice == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v30First := true
			for v30Name, v30Value := range in.CurrentPrice {
				if v30First {
					v30First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v30Name))
				out.RawByte(':')
				out.Float64(float64(v30Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"roi\":"
		out.RawString(prefix)
		if in.ROI == nil {
			out.RawString("null")
		} else {
			(*in.ROI).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"ath\":"
		out.RawString(prefix)
		if in.ATH == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v31First := true
			for v31Name, v31Value := range in.ATH {
				if v31First {
					v31First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v31Name))
				out.RawByte(':')
				out.Float64(float64(v31Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"ath_change_percentage\":"
		out.RawString(prefix)
		if in.ATHChangePercentage == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v32First := true
			for v32Name, v32Value := range in.ATHChangePercentage {
				if v32First {
					v32First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v32Name))
				out.RawByte(':')
				out.Float64(float64(v32Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"ath_date\":"
		out.RawString(prefix)
		if in.ATHDate == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v33First := true
			for v33Name, v33Value := range in.ATHDate {
				if v33First {
					v33First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v33Name))
				out.RawByte(':')
				out.String(string(v33Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"atl\":"
		out.RawString(prefix)
		if in.ATL == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v34First := true
			for v34Name, v34Value := range in.ATL {
				if v34First {
					v34First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v34Name))
				out.RawByte(':')
				out.Float64(float64(v34Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"atl_change_percentage\":"
		out.RawString(prefix)
		if in.ATLChangePercentage == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v35First := true
			for v35Name, v35Value := range in.ATLChangePercentage {
				if v35First {
					v35First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v35Name))
				out.RawByte(':')
				out.Float64(float64(v35Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"atl_date\":"
		out.RawString(prefix)
		if in.ATLDate == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v36First := true
			for v36Name, v36Value := range in.ATLDate {
				if v36First {
					v36First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v36Name))
				out.RawByte(':')
				out.String(string(v36Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"market_cap\":"
		out.RawString(prefix)
		if in.MarketCap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v37First := true
			for v37Name, v37Value := range in.MarketCap {
				if v37First {
					v37First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v37Name))
				out.RawByte(':')
				out.Float64(float64(v37Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"market_cap_rank\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.MarketCapRank))
	}
	{
		const prefix string = ",\"total_volume\":"
		out.RawString(prefix)
		if in.TotalVolume == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v38First := true
			for v38Name, v38Value := range in.TotalVolume {
				if v38First {
					v38First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v38Name))
				out.RawByte(':')
				out.Float64(float64(v38Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"high_24h\":"
		out.RawString(prefix)
		if in.High24 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v39First := true
			for v39Name, v39Value := range in.High24 {
				if v39First {
					v39First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v39Name))
				out.RawByte(':')
				out.Float64(float64(v39Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"low_24h\":"
		out.RawString(prefix)
		if in.Low24 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v40First := true
			for v40Name, v40Value := range in.Low24 {
				if v40First {
					v40First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v40Name))
				out.RawByte(':')
				out.Float64(float64(v40Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChange24h))
	}
	{
		const prefix string = ",\"price_change_percentage_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage24h))
	}
	{
		const prefix string = ",\"price_change_percentage_7d\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage7d))
	}
	{
		const prefix string = ",\"price_change_percentage_14d\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage14d))
	}
	{
		const prefix string = ",\"price_change_percentage_30d\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage30d))
	}
	{
		const prefix string = ",\"price_change_percentage_60d\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage60d))
	}
	{
		const prefix string = ",\"price_change_percentage_200d\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage200d))
	}
	{
		const prefix string = ",\"price_change_percentage_1y\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage1y))
	}
	{
		const prefix string = ",\"market_cap_change_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.MarketCapChange24h))
	}
	{
		const prefix string = ",\"market_cap_change_percentage_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.MarketCapChangePercentage24h))
	}
	{
		const prefix string = ",\"price_change_24h_in_currency\":"
		out.RawString(prefix)
		if in.PriceChange24hInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v41First := true
			for v41Name, v41Value := range in.PriceChange24hInCurrency {
				if v41First {
					v41First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v41Name))
				out.RawByte(':')
				out.Float64(float64(v41Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_1h_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage1hInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v42First := true
			for v42Name, v42Value := range in.PriceChangePercentage1hInCurrency {
				if v42First {
					v42First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v42Name))
				out.RawByte(':')
				out.Float64(float64(v42Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_24h_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage24hInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v43First := true
			for v43Name, v43Value := range in.PriceChangePercentage24hInCurrency {
				if v43First {
					v43First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v43Name))
				out.RawByte(':')
				out.Float64(float64(v43Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_7d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage7dInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v44First := true
			for v44Name, v44Value := range in.PriceChangePercentage7dInCurrency {
				if v44First {
					v44First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v44Name))
				out.RawByte(':')
				out.Float64(float64(v44Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_14d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage14dInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v45First := true
			for v45Name, v45Value := range in.PriceChangePercentage14dInCurrency {
				if v45First {
					v45First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v45Name))
				out.RawByte(':')
				out.Float64(float64(v45Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_30d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage30dInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v46First := true
			for v46Name, v46Value := range in.PriceChangePercentage30dInCurrency {
				if v46First {
					v46First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v46Name))
				out.RawByte(':')
				out.Float64(float64(v46Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_60d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage60dInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v47First := true
			for v47Name, v47Value := range in.PriceChangePercentage60dInCurrency {
				if v47First {
					v47First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v47Name))
				out.RawByte(':')
				out.Float64(float64(v47Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_200d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage200dInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v48First := true
			for v48Name, v48Value := range in.PriceChangePercentage200dInCurrency {
				if v48First {
					v48First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v48Name))
				out.RawByte(':')
				out.Float64(float64(v48Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_1y_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage1yInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v49First := true
			for v49Name, v49Value := range in.PriceChangePercentage1yInCurrency {
				if v49First {
					v49First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v49Name))
				out.RawByte(':')
				out.Float64(float64(v49Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"market_cap_change_24h_in_currency\":"
		out.RawString(prefix)
		if in.MarketCapChange24hInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v50First := true
			for v50Name, v50Value := range in.MarketCapChange24hInCurrency {
				if v50First {
					v50First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v50Name))
				out.RawByte(':')
				out.Float64(float64(v50Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"market_cap_change_percentage_24h_in_currency\":"
		out.RawString(prefix)
		if in.MarketCapChangePercentage24hInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v51First := true
			for v51Name, v51Value := range in.MarketCapChangePercentage24hInCurrency {
				if v51First {
					v51First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v51Name))
				out.RawByte(':')
				out.Float64(float64(v51Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"total_supply\":"
		out.RawString(prefix)
		if in.TotalSupply == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TotalSupply))
		}
	}
	{
		const prefix string = ",\"circulating_supply\":"
		out.RawString(prefix)
		out.Float64(float64(in.CirculatingSupply))
	}
	{
		const prefix string = ",\"sparkline_7d\":"
		out.RawString(prefix)
		if in.Sparkline == nil {
			out.RawString("null")
		} else {
			(*in.Sparkline).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"last_updated\":"
		out.RawString(prefix)
		out.String(string(in.LastUpdated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketDataItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDataItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketDataItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDataItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types8(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types9(in *jlexer.Lexer, out *ImageItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "thumb":
			out.Thumb = string(in.String())
		case "small":
			out.Small = string(in.String())
		case "large":
			out.Large = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types9(out *jwriter.Writer, in ImageItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"thumb\":"
		out.RawString(prefix[1:])
		out.String(string(in.Thumb))
	}
	{
		const prefix string = ",\"small\":"
		out.RawString(prefix)
		out.String(string(in.Small))
	}
	{
		const prefix string = ",\"large\":"
		out.RawString(prefix)
		out.String(string(in.Large))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ImageItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImageItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImageItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImageItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types9(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types10(in *jlexer.Lexer, out *Global) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "active_cryptocurrencies":
			out.ActiveCryptocurrencies = uint16(in.Uint16())
		case "upcoming_icos":
			out.UpcomingICOs = uint16(in.Uint16())
		case "ended_icos":
			out.EndedICOs = uint16(in.Uint16())
		case "markets":
			out.Markets = uint16(in.Uint16())
		case "market_cap_change_percentage_24h_usd":
			out.MarketCapChangePercentage24hUSD = float32(in.Float32())
		case "total_market_cap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TotalMarketCap = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v52 float64
					v52 = float64(in.Float64())
					(out.TotalMarketCap)[key] = v52
					in.WantComma()
				}
				in.Delim('}')
			}
		case "total_volume":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TotalVolume = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v53 float64
					v53 = float64(in.Float64())
					(out.TotalVolume)[key] = v53
					in.WantComma()
				}
				in.Delim('}')
			}
		case "market_cap_percentage":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MarketCapPercentage = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v54 float64
					v54 = float64(in.Float64())
					(out.MarketCapPercentage)[key] = v54
					in.WantComma()
				}
				in.Delim('}')
			}
		case "updated_at":
			out.UpdatedAt = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types10(out *jwriter.Writer, in Global) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"active_cryptocurrencies\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.ActiveCryptocurrencies))
	}
	{
		const prefix string = ",\"upcoming_icos\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.UpcomingICOs))
	}
	{
		const prefix string = ",\"ended_icos\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.EndedICOs))
	}
	{
		const prefix string = ",\"markets\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Markets))
	}
	{
		const prefix string = ",\"market_cap_change_percentage_24h_usd\":"
		out.RawString(prefix)
		out.Float32(float32(in.MarketCapChangePercentage24hUSD))
	}
	{
		const prefix string = ",\"total_market_cap\":"
		out.RawString(prefix)
		if in.TotalMarketCap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v55First := true
			for v55Name, v55Value := range in.TotalMarketCap {
				if v55First {
					v55First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v55Name))
				out.RawByte(':')
				out.Float64(float64(v55Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"total_volume\":"
		out.RawString(prefix)
		if in.TotalVolume == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v56First := true
			for v56Name, v56Value := range in.TotalVolume {
				if v56First {
					v56First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v56Name))
				out.RawByte(':')
				out.Float64(float64(v56Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"market_cap_percentage\":"
		out.RawString(prefix)
		if in.MarketCapPercentage == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v57First := true
			for v57Name, v57Value := range in.MarketCapPercentage {
				if v57First {
					v57First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v57Name))
				out.RawByte(':')
				out.Float64(float64(v57Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Global) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Global) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Global) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Global) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types10(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types11(in *jlexer.Lexer, out *ExchangeRatesItemStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "unit":
			out.Unit = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types11(out *jwriter.Writer, in ExchangeRatesItemStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"unit\":"
		out.RawString(prefix)
		out.String(string(in.Unit))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeRatesItemStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeRatesItemStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeRatesItemStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeRatesItemStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types11(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types12(in *jlexer.Lexer, out *EventCountryItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "country":
			out.Country = string(in.String())
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types12(out *jwriter.Writer, in EventCountryItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix[1:])
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventCountryItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventCountryItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventCountryItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventCountryItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types12(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types13(in *jlexer.Lexer, out *DeveloperDataItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "forks":
			if in.IsNull() {
				in.Skip()
				out.Forks = nil
			} else {
				if out.Forks == nil {
					out.Forks = new(uint)
				}
				*out.Forks = uint(in.Uint())
			}
		case "stars":
			if in.IsNull() {
				in.Skip()
				out.Stars = nil
			} else {
				if out.Stars == nil {
					out.Stars = new(uint)
				}
				*out.Stars = uint(in.Uint())
			}
		case "subscribers":
			if in.IsNull() {
				in.Skip()
				out.Subscribers = nil
			} else {
				if out.Subscribers == nil {
					out.Subscribers = new(uint)
				}
				*out.Subscribers = uint(in.Uint())
			}
		case "total_issues":
			if in.IsNull() {
				in.Skip()
				out.TotalIssues = nil
			} else {
				if out.TotalIssues == nil {
					out.TotalIssues = new(uint)
				}
				*out.TotalIssues = uint(in.Uint())
			}
		case "closed_issues":
			if in.IsNull() {
				in.Skip()
				out.ClosedIssues = nil
			} else {
				if out.ClosedIssues == nil {
					out.ClosedIssues = new(uint)
				}
				*out.ClosedIssues = uint(in.Uint())
			}
		case "pull_requests_merged":
			if in.IsNull() {
				in.Skip()
				out.PRMerged = nil
			} else {
				if out.PRMerged == nil {
					out.PRMerged = new(uint)
				}
				*out.PRMerged = uint(in.Uint())
			}
		case "pull_request_contributors":
			if in.IsNull() {
				in.Skip()
				out.PRContributors = nil
			} else {
				if out.PRContributors == nil {
					out.PRContributors = new(uint)
				}
				*out.PRContributors = uint(in.Uint())
			}
		case "commit_count_4_weeks":
			if in.IsNull() {
				in.Skip()
				out.CommitsCount4Weeks = nil
			} else {
				if out.CommitsCount4Weeks == nil {
					out.CommitsCount4Weeks = new(uint)
				}
				*out.CommitsCount4Weeks = uint(in.Uint())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types13(out *jwriter.Writer, in DeveloperDataItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"forks\":"
		out.RawString(prefix[1:])
		if in.Forks == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.Forks))
		}
	}
	{
		const prefix string = ",\"stars\":"
		out.RawString(prefix)
		if in.Stars == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.Stars))
		}
	}
	{
		const prefix string = ",\"subscribers\":"
		out.RawString(prefix)
		if in.Subscribers == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.Subscribers))
		}
	}
	{
		const prefix string = ",\"total_issues\":"
		out.RawString(prefix)
		if in.TotalIssues == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.TotalIssues))
		}
	}
	{
		const prefix string = ",\"closed_issues\":"
		out.RawString(prefix)
		if in.ClosedIssues == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.ClosedIssues))
		}
	}
	{
		const prefix string = ",\"pull_requests_merged\":"
		out.RawString(prefix)
		if in.PRMerged == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.PRMerged))
		}
	}
	{
		const prefix string = ",\"pull_request_contributors\":"
		out.RawString(prefix)
		if in.PRContributors == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.PRContributors))
		}
	}
	{
		const prefix string = ",\"commit_count_4_weeks\":"
		out.RawString(prefix)
		if in.CommitsCount4Weeks == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.CommitsCount4Weeks))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeveloperDataItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeveloperDataItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeveloperDataItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeveloperDataItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types13(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types14(in *jlexer.Lexer, out *CommunityDataItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "facebook_likes":
			if in.IsNull() {
				in.Skip()
				out.FacebookLikes = nil
			} else {
				if out.FacebookLikes == nil {
					out.FacebookLikes = new(uint)
				}
				*out.FacebookLikes = uint(in.Uint())
			}
		case "twitter_followers":
			if in.IsNull() {
				in.Skip()
				out.TwitterFollowers = nil
			} else {
				if out.TwitterFollowers == nil {
					out.TwitterFollowers = new(uint)
				}
				*out.TwitterFollowers = uint(in.Uint())
			}
		case "reddit_average_posts_48h":
			if in.IsNull() {
				in.Skip()
				out.RedditAveragePosts48h = nil
			} else {
				if out.RedditAveragePosts48h == nil {
					out.RedditAveragePosts48h = new(float64)
				}
				*out.RedditAveragePosts48h = float64(in.Float64())
			}
		case "reddit_average_comments_48h":
			if in.IsNull() {
				in.Skip()
				out.RedditAverageComments48h = nil
			} else {
				if out.RedditAverageComments48h == nil {
					out.RedditAverageComments48h = new(float64)
				}
				*out.RedditAverageComments48h = float64(in.Float64())
			}
		case "reddit_subscribers":
			if in.IsNull() {
				in.Skip()
				out.RedditSubscribers = nil
			} else {
				if out.RedditSubscribers == nil {
					out.RedditSubscribers = new(uint)
				}
				*out.RedditSubscribers = uint(in.Uint())
			}
		case "telegram_channel_user_count":
			if in.IsNull() {
				in.Skip()
				out.TelegramChannelUserCount = nil
			} else {
				if out.TelegramChannelUserCount == nil {
					out.TelegramChannelUserCount = new(uint)
				}
				*out.TelegramChannelUserCount = uint(in.Uint())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types14(out *jwriter.Writer, in CommunityDataItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"facebook_likes\":"
		out.RawString(prefix[1:])
		if in.FacebookLikes == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.FacebookLikes))
		}
	}
	{
		const prefix string = ",\"twitter_followers\":"
		out.RawString(prefix)
		if in.TwitterFollowers == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.TwitterFollowers))
		}
	}
	{
		const prefix string = ",\"reddit_average_posts_48h\":"
		out.RawString(prefix)
		if in.RedditAveragePosts48h == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.RedditAveragePosts48h))
		}
	}
	{
		const prefix string = ",\"reddit_average_comments_48h\":"
		out.RawString(prefix)
		if in.RedditAverageComments48h == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.RedditAverageComments48h))
		}
	}
	{
		const prefix string = ",\"reddit_subscribers\":"
		out.RawString(prefix)
		if in.RedditSubscribers == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.RedditSubscribers))
		}
	}
	{
		const prefix string = ",\"telegram_channel_user_count\":"
		out.RawString(prefix)
		if in.TelegramChannelUserCount == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.TelegramChannelUserCount))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommunityDataItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommunityDataItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommunityDataItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommunityDataItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types14(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types15(in *jlexer.Lexer, out *CoinsMarketItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "image":
			out.Image = string(in.String())
		case "current_price":
			out.CurrentPrice = float64(in.Float64())
		case "market_cap":
			out.MarketCap = float64(in.Float64())
		case "market_cap_rank":
			out.MarketCapRank = int16(in.Int16())
		case "total_volume":
			out.TotalVolume = float64(in.Float64())
		case "high_24h":
			out.High24 = float64(in.Float64())
		case "low_24h":
			out.Low24 = float64(in.Float64())
		case "price_change_24h":
			out.PriceChange24h = float64(in.Float64())
		case "price_change_percentage_24h":
			out.PriceChangePercentage24h = float64(in.Float64())
		case "market_cap_change_24h":
			out.MarketCapChange24h = float64(in.Float64())
		case "market_cap_change_percentage_24h":
			out.MarketCapChangePercentage24h = float64(in.Float64())
		case "circulating_supply":
			out.CirculatingSupply = float64(in.Float64())
		case "total_supply":
			out.TotalSupply = float64(in.Float64())
		case "ath":
			out.ATH = float64(in.Float64())
		case "ath_change_percentage":
			out.ATHChangePercentage = float64(in.Float64())
		case "ath_date":
			out.ATHDate = string(in.String())
		case "roi":
			if in.IsNull() {
				in.Skip()
				out.ROI = nil
			} else {
				if out.ROI == nil {
					out.ROI = new(ROIItem)
				}
				(*out.ROI).UnmarshalEasyJSON(in)
			}
		case "last_updated":
			out.LastUpdated = string(in.String())
		case "sparkline_in_7d":
			if in.IsNull() {
				in.Skip()
				out.SparklineIn7d = nil
			} else {
				if out.SparklineIn7d == nil {
					out.SparklineIn7d = new(SparklineItem)
				}
				(*out.SparklineIn7d).UnmarshalEasyJSON(in)
			}
		case "price_change_percentage_1h_in_currency":
			if in.IsNull() {
				in.Skip()
				out.PriceChangePercentage1hInCurrency = nil
			} else {
				if out.PriceChangePercentage1hInCurrency == nil {
					out.PriceChangePercentage1hInCurrency = new(float64)
				}
				*out.PriceChangePercentage1hInCurrency = float64(in.Float64())
			}
		case "price_change_percentage_24h_in_currency":
			if in.IsNull() {
				in.Skip()
				out.PriceChangePercentage24hInCurrency = nil
			} else {
				if out.PriceChangePercentage24hInCurrency == nil {
					out.PriceChangePercentage24hInCurrency = new(float64)
				}
				*out.PriceChangePercentage24hInCurrency = float64(in.Float64())
			}
		case "price_change_percentage_7d_in_currency":
			if in.IsNull() {
				in.Skip()
				out.PriceChangePercentage7dInCurrency = nil
			} else {
				if out.PriceChangePercentage7dInCurrency == nil {
					out.PriceChangePercentage7dInCurrency = new(float64)
				}
				*out.PriceChangePercentage7dInCurrency = float64(in.Float64())
			}
		case "price_change_percentage_14d_in_currency":
			if in.IsNull() {
				in.Skip()
				out.PriceChangePercentage14dInCurrency = nil
			} else {
				if out.PriceChangePercentage14dInCurrency == nil {
					out.PriceChangePercentage14dInCurrency = new(float64)
				}
				*out.PriceChangePercentage14dInCurrency = float64(in.Float64())
			}
		case "price_change_percentage_30d_in_currency":
			if in.IsNull() {
				in.Skip()
				out.PriceChangePercentage30dInCurrency = nil
			} else {
				if out.PriceChangePercentage30dInCurrency == nil {
					out.PriceChangePercentage30dInCurrency = new(float64)
				}
				*out.PriceChangePercentage30dInCurrency = float64(in.Float64())
			}
		case "price_change_percentage_200d_in_currency":
			if in.IsNull() {
				in.Skip()
				out.PriceChangePercentage200dInCurrency = nil
			} else {
				if out.PriceChangePercentage200dInCurrency == nil {
					out.PriceChangePercentage200dInCurrency = new(float64)
				}
				*out.PriceChangePercentage200dInCurrency = float64(in.Float64())
			}
		case "price_change_percentage_1y_in_currency":
			if in.IsNull() {
				in.Skip()
				out.PriceChangePercentage1yInCurrency = nil
			} else {
				if out.PriceChangePercentage1yInCurrency == nil {
					out.PriceChangePercentage1yInCurrency = new(float64)
				}
				*out.PriceChangePercentage1yInCurrency = float64(in.Float64())
			}
		case "id":
			out.ID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types15(out *jwriter.Writer, in CoinsMarketItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix[1:])
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"current_price\":"
		out.RawString(prefix)
		out.Float64(float64(in.CurrentPrice))
	}
	{
		const prefix string = ",\"market_cap\":"
		out.RawString(prefix)
		out.Float64(float64(in.MarketCap))
	}
	{
		const prefix string = ",\"market_cap_rank\":"
		out.RawString(prefix)
		out.Int16(int16(in.MarketCapRank))
	}
	{
		const prefix string = ",\"total_volume\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalVolume))
	}
	{
		const prefix string = ",\"high_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.High24))
	}
	{
		const prefix string = ",\"low_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.Low24))
	}
	{
		const prefix string = ",\"price_change_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChange24h))
	}
	{
		const prefix string = ",\"price_change_percentage_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage24h))
	}
	{
		const prefix string = ",\"market_cap_change_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.MarketCapChange24h))
	}
	{
		const prefix string = ",\"market_cap_change_percentage_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.MarketCapChangePercentage24h))
	}
	{
		const prefix string = ",\"circulating_supply\":"
		out.RawString(prefix)
		out.Float64(float64(in.CirculatingSupply))
	}
	{
		const prefix string = ",\"total_supply\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalSupply))
	}
	{
		const prefix string = ",\"ath\":"
		out.RawString(prefix)
		out.Float64(float64(in.ATH))
	}
	{
		const prefix string = ",\"ath_change_percentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.ATHChangePercentage))
	}
	{
		const prefix string = ",\"ath_date\":"
		out.RawString(prefix)
		out.String(string(in.ATHDate))
	}
	{
		const prefix string = ",\"roi\":"
		out.RawString(prefix)
		if in.ROI == nil {
			out.RawString("null")
		} else {
			(*in.ROI).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"last_updated\":"
		out.RawString(prefix)
		out.String(string(in.LastUpdated))
	}
	{
		const prefix string = ",\"sparkline_in_7d\":"
		out.RawString(prefix)
		if in.SparklineIn7d == nil {
			out.RawString("null")
		} else {
			(*in.SparklineIn7d).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"price_change_percentage_1h_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage1hInCurrency == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.PriceChangePercentage1hInCurrency))
		}
	}
	{
		const prefix string = ",\"price_change_percentage_24h_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage24hInCurrency == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.PriceChangePercentage24hInCurrency))
		}
	}
	{
		const prefix string = ",\"price_change_percentage_7d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage7dInCurrency == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.PriceChangePercentage7dInCurrency))
		}
	}
	{
		const prefix string = ",\"price_change_percentage_14d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage14dInCurrency == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.PriceChangePercentage14dInCurrency))
		}
	}
	{
		const prefix string = ",\"price_change_percentage_30d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage30dInCurrency == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.PriceChangePercentage30dInCurrency))
		}
	}
	{
		const prefix string = ",\"price_change_percentage_200d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage200dInCurrency == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.PriceChangePercentage200dInCurrency))
		}
	}
	{
		const prefix string = ",\"price_change_percentage_1y_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage1yInCurrency == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.PriceChangePercentage1yInCurrency))
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CoinsMarketItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CoinsMarketItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CoinsMarketItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CoinsMarketItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types15(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types16(in *jlexer.Lexer, out *CoinsListItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types16(out *jwriter.Writer, in CoinsListItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CoinsListItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CoinsListItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CoinsListItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CoinsListItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types16(l, v)
}
func easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types17(in *jlexer.Lexer, out *Category) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "market_cap":
			out.MarketCap = float64(in.Float64())
		case "market_cap_change_24h":
			out.MarketCapChange24h = float64(in.Float64())
		case "content":
			out.Content = string(in.String())
		case "top_3_coins":
			if in.IsNull() {
				in.Skip()
				out.Top3Coins = nil
			} else {
				in.Delim('[')
				if out.Top3Coins == nil {
					if !in.IsDelim(']') {
						out.Top3Coins = make([]string, 0, 4)
					} else {
						out.Top3Coins = []string{}
					}
				} else {
					out.Top3Coins = (out.Top3Coins)[:0]
				}
				for !in.IsDelim(']') {
					var v58 string
					v58 = string(in.String())
					out.Top3Coins = append(out.Top3Coins, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "volume_24_h":
			out.Volume24H = float64(in.Float64())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types17(out *jwriter.Writer, in Category) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"market_cap\":"
		out.RawString(prefix)
		out.Float64(float64(in.MarketCap))
	}
	{
		const prefix string = ",\"market_cap_change_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.MarketCapChange24h))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"top_3_coins\":"
		out.RawString(prefix)
		if in.Top3Coins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.Top3Coins {
				if v59 > 0 {
					out.RawByte(',')
				}
				out.String(string(v60))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"volume_24_h\":"
		out.RawString(prefix)
		out.Float64(float64(in.Volume24H))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Category) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Category) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGrishameisterGoGeckoV3Types17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Category) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Category) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGrishameisterGoGeckoV3Types17(l, v)
}
