// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types(in *jlexer.Lexer, out *SimpleSinglePrice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Currency":
			out.Currency = string(in.String())
		case "MarketPrice":
			out.MarketPrice = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types(out *jwriter.Writer, in SimpleSinglePrice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"MarketPrice\":"
		out.RawString(prefix)
		out.Float32(float32(in.MarketPrice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SimpleSinglePrice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SimpleSinglePrice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SimpleSinglePrice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SimpleSinglePrice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types(l, v)
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types1(in *jlexer.Lexer, out *Ping) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gecko_says":
			out.GeckoSays = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types1(out *jwriter.Writer, in Ping) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"gecko_says\":"
		out.RawString(prefix[1:])
		out.String(string(in.GeckoSays))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ping) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ping) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ping) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ping) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types1(l, v)
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types2(in *jlexer.Lexer, out *GlobalResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types3(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types2(out *jwriter.Writer, in GlobalResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types3(out, in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types2(l, v)
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types3(in *jlexer.Lexer, out *Global) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "active_cryptocurrencies":
			out.ActiveCryptocurrencies = uint16(in.Uint16())
		case "upcoming_icos":
			out.UpcomingICOs = uint16(in.Uint16())
		case "ended_icos":
			out.EndedICOs = uint16(in.Uint16())
		case "markets":
			out.Markets = uint16(in.Uint16())
		case "market_cap_change_percentage_24h_usd":
			out.MarketCapChangePercentage24hUSD = float32(in.Float32())
		case "total_market_cap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TotalMarketCap = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 float64
					v1 = float64(in.Float64())
					(out.TotalMarketCap)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "total_volume":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TotalVolume = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 float64
					v2 = float64(in.Float64())
					(out.TotalVolume)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "market_cap_percentage":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MarketCapPercentage = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 float64
					v3 = float64(in.Float64())
					(out.MarketCapPercentage)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "updated_at":
			out.UpdatedAt = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types3(out *jwriter.Writer, in Global) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"active_cryptocurrencies\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.ActiveCryptocurrencies))
	}
	{
		const prefix string = ",\"upcoming_icos\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.UpcomingICOs))
	}
	{
		const prefix string = ",\"ended_icos\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.EndedICOs))
	}
	{
		const prefix string = ",\"markets\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Markets))
	}
	{
		const prefix string = ",\"market_cap_change_percentage_24h_usd\":"
		out.RawString(prefix)
		out.Float32(float32(in.MarketCapChangePercentage24hUSD))
	}
	{
		const prefix string = ",\"total_market_cap\":"
		out.RawString(prefix)
		if in.TotalMarketCap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.TotalMarketCap {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.Float64(float64(v4Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"total_volume\":"
		out.RawString(prefix)
		if in.TotalVolume == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.TotalVolume {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.Float64(float64(v5Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"market_cap_percentage\":"
		out.RawString(prefix)
		if in.MarketCapPercentage == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.MarketCapPercentage {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				out.Float64(float64(v6Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdatedAt))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types4(in *jlexer.Lexer, out *ExchangeRatesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rates":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Rates = make(ExchangeRatesItem)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 ExchangeRatesItemStruct
					easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types5(in, &v7)
					(out.Rates)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types4(out *jwriter.Writer, in ExchangeRatesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rates\":"
		out.RawString(prefix[1:])
		if in.Rates == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Rates {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types5(out, v8Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeRatesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeRatesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeRatesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeRatesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types4(l, v)
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types5(in *jlexer.Lexer, out *ExchangeRatesItemStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "unit":
			out.Unit = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types5(out *jwriter.Writer, in ExchangeRatesItemStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"unit\":"
		out.RawString(prefix)
		out.String(string(in.Unit))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types6(in *jlexer.Lexer, out *EventsTypes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]string, 0, 4)
					} else {
						out.Data = []string{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Data = append(out.Data, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "count":
			out.Count = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types6(out *jwriter.Writer, in EventsTypes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Data {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventsTypes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventsTypes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventsTypes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventsTypes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types6(l, v)
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types7(in *jlexer.Lexer, out *EventsCountries) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]EventCountryItem, 0, 2)
					} else {
						out.Data = []EventCountryItem{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v12 EventCountryItem
					easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types8(in, &v12)
					out.Data = append(out.Data, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types7(out *jwriter.Writer, in EventsCountries) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Data {
				if v13 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types8(out, v14)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventsCountries) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventsCountries) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventsCountries) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventsCountries) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types7(l, v)
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types8(in *jlexer.Lexer, out *EventCountryItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "country":
			out.Country = string(in.String())
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types8(out *jwriter.Writer, in EventCountryItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix[1:])
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types9(in *jlexer.Lexer, out *CoinsIDTickers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "tickers":
			if in.IsNull() {
				in.Skip()
				out.Tickers = nil
			} else {
				in.Delim('[')
				if out.Tickers == nil {
					if !in.IsDelim(']') {
						out.Tickers = make([]TickerItem, 0, 0)
					} else {
						out.Tickers = []TickerItem{}
					}
				} else {
					out.Tickers = (out.Tickers)[:0]
				}
				for !in.IsDelim(']') {
					var v15 TickerItem
					easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types10(in, &v15)
					out.Tickers = append(out.Tickers, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types9(out *jwriter.Writer, in CoinsIDTickers) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"tickers\":"
		out.RawString(prefix)
		if in.Tickers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Tickers {
				if v16 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types10(out, v17)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CoinsIDTickers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CoinsIDTickers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CoinsIDTickers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CoinsIDTickers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types9(l, v)
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types10(in *jlexer.Lexer, out *TickerItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "base":
			out.Base = string(in.String())
		case "target":
			out.Target = string(in.String())
		case "market":
			easyjson6601e8cdDecode(in, &out.Market)
		case "last":
			out.Last = float64(in.Float64())
		case "converted_last":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ConvertedLast = make(map[string]float64)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v18 float64
					v18 = float64(in.Float64())
					(out.ConvertedLast)[key] = v18
					in.WantComma()
				}
				in.Delim('}')
			}
		case "volume":
			out.Volume = float64(in.Float64())
		case "converted_volume":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ConvertedVolume = make(map[string]float64)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 float64
					v19 = float64(in.Float64())
					(out.ConvertedVolume)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		case "timestamp":
			out.Timestamp = string(in.String())
		case "is_anomaly":
			out.IsAnomaly = bool(in.Bool())
		case "is_stale":
			out.IsStale = bool(in.Bool())
		case "coin_id":
			out.CoinID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types10(out *jwriter.Writer, in TickerItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"base\":"
		out.RawString(prefix[1:])
		out.String(string(in.Base))
	}
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		out.String(string(in.Target))
	}
	{
		const prefix string = ",\"market\":"
		out.RawString(prefix)
		easyjson6601e8cdEncode(out, in.Market)
	}
	{
		const prefix string = ",\"last\":"
		out.RawString(prefix)
		out.Float64(float64(in.Last))
	}
	{
		const prefix string = ",\"converted_last\":"
		out.RawString(prefix)
		if in.ConvertedLast == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.ConvertedLast {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				out.Float64(float64(v20Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"volume\":"
		out.RawString(prefix)
		out.Float64(float64(in.Volume))
	}
	{
		const prefix string = ",\"converted_volume\":"
		out.RawString(prefix)
		if in.ConvertedVolume == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v21First := true
			for v21Name, v21Value := range in.ConvertedVolume {
				if v21First {
					v21First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v21Name))
				out.RawByte(':')
				out.Float64(float64(v21Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"is_anomaly\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAnomaly))
	}
	{
		const prefix string = ",\"is_stale\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsStale))
	}
	{
		const prefix string = ",\"coin_id\":"
		out.RawString(prefix)
		out.String(string(in.CoinID))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode(in *jlexer.Lexer, out *struct {
	Name             string `json:"name"`
	Identifier       string `json:"identifier"`
	TradingIncentive bool   `json:"has_trading_incentive"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "has_trading_incentive":
			out.TradingIncentive = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode(out *jwriter.Writer, in struct {
	Name             string `json:"name"`
	Identifier       string `json:"identifier"`
	TradingIncentive bool   `json:"has_trading_incentive"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix)
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"has_trading_incentive\":"
		out.RawString(prefix)
		out.Bool(bool(in.TradingIncentive))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types11(in *jlexer.Lexer, out *CoinsIDMarketChart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "prices":
			if in.IsNull() {
				in.Skip()
				out.Prices = nil
			} else {
				if out.Prices == nil {
					out.Prices = new([]ChartItem)
				}
				if in.IsNull() {
					in.Skip()
					*out.Prices = nil
				} else {
					in.Delim('[')
					if *out.Prices == nil {
						if !in.IsDelim(']') {
							*out.Prices = make([]ChartItem, 0, 8)
						} else {
							*out.Prices = []ChartItem{}
						}
					} else {
						*out.Prices = (*out.Prices)[:0]
					}
					for !in.IsDelim(']') {
						var v22 ChartItem
						if in.IsNull() {
							in.Skip()
						} else {
							in.Delim('[')
							v23 := 0
							for !in.IsDelim(']') {
								if v23 < 2 {
									(v22)[v23] = float32(in.Float32())
									v23++
								} else {
									in.SkipRecursive()
								}
								in.WantComma()
							}
							in.Delim(']')
						}
						*out.Prices = append(*out.Prices, v22)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "market_caps":
			if in.IsNull() {
				in.Skip()
				out.MarketCaps = nil
			} else {
				if out.MarketCaps == nil {
					out.MarketCaps = new([]ChartItem)
				}
				if in.IsNull() {
					in.Skip()
					*out.MarketCaps = nil
				} else {
					in.Delim('[')
					if *out.MarketCaps == nil {
						if !in.IsDelim(']') {
							*out.MarketCaps = make([]ChartItem, 0, 8)
						} else {
							*out.MarketCaps = []ChartItem{}
						}
					} else {
						*out.MarketCaps = (*out.MarketCaps)[:0]
					}
					for !in.IsDelim(']') {
						var v24 ChartItem
						if in.IsNull() {
							in.Skip()
						} else {
							in.Delim('[')
							v25 := 0
							for !in.IsDelim(']') {
								if v25 < 2 {
									(v24)[v25] = float32(in.Float32())
									v25++
								} else {
									in.SkipRecursive()
								}
								in.WantComma()
							}
							in.Delim(']')
						}
						*out.MarketCaps = append(*out.MarketCaps, v24)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "total_volumes":
			if in.IsNull() {
				in.Skip()
				out.TotalVolumes = nil
			} else {
				if out.TotalVolumes == nil {
					out.TotalVolumes = new([]ChartItem)
				}
				if in.IsNull() {
					in.Skip()
					*out.TotalVolumes = nil
				} else {
					in.Delim('[')
					if *out.TotalVolumes == nil {
						if !in.IsDelim(']') {
							*out.TotalVolumes = make([]ChartItem, 0, 8)
						} else {
							*out.TotalVolumes = []ChartItem{}
						}
					} else {
						*out.TotalVolumes = (*out.TotalVolumes)[:0]
					}
					for !in.IsDelim(']') {
						var v26 ChartItem
						if in.IsNull() {
							in.Skip()
						} else {
							in.Delim('[')
							v27 := 0
							for !in.IsDelim(']') {
								if v27 < 2 {
									(v26)[v27] = float32(in.Float32())
									v27++
								} else {
									in.SkipRecursive()
								}
								in.WantComma()
							}
							in.Delim(']')
						}
						*out.TotalVolumes = append(*out.TotalVolumes, v26)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "id":
			out.ID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types11(out *jwriter.Writer, in CoinsIDMarketChart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"prices\":"
		out.RawString(prefix[1:])
		if in.Prices == nil {
			out.RawString("null")
		} else {
			if *in.Prices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v28, v29 := range *in.Prices {
					if v28 > 0 {
						out.RawByte(',')
					}
					out.RawByte('[')
					for v30 := range v29 {
						if v30 > 0 {
							out.RawByte(',')
						}
						out.Float32(float32((v29)[v30]))
					}
					out.RawByte(']')
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"market_caps\":"
		out.RawString(prefix)
		if in.MarketCaps == nil {
			out.RawString("null")
		} else {
			if *in.MarketCaps == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v31, v32 := range *in.MarketCaps {
					if v31 > 0 {
						out.RawByte(',')
					}
					out.RawByte('[')
					for v33 := range v32 {
						if v33 > 0 {
							out.RawByte(',')
						}
						out.Float32(float32((v32)[v33]))
					}
					out.RawByte(']')
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"total_volumes\":"
		out.RawString(prefix)
		if in.TotalVolumes == nil {
			out.RawString("null")
		} else {
			if *in.TotalVolumes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v34, v35 := range *in.TotalVolumes {
					if v34 > 0 {
						out.RawByte(',')
					}
					out.RawByte('[')
					for v36 := range v35 {
						if v36 > 0 {
							out.RawByte(',')
						}
						out.Float32(float32((v35)[v36]))
					}
					out.RawByte(']')
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CoinsIDMarketChart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CoinsIDMarketChart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CoinsIDMarketChart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CoinsIDMarketChart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types11(l, v)
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types12(in *jlexer.Lexer, out *CoinsIDHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "localization":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Localization = make(LocalizationItem)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v37 string
					v37 = string(in.String())
					(out.Localization)[key] = v37
					in.WantComma()
				}
				in.Delim('}')
			}
		case "image":
			easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types13(in, &out.Image)
		case "market_data":
			if in.IsNull() {
				in.Skip()
				out.MarketData = nil
			} else {
				if out.MarketData == nil {
					out.MarketData = new(MarketDataItem)
				}
				easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types14(in, out.MarketData)
			}
		case "community_data":
			if in.IsNull() {
				in.Skip()
				out.CommunityData = nil
			} else {
				if out.CommunityData == nil {
					out.CommunityData = new(CommunityDataItem)
				}
				easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types15(in, out.CommunityData)
			}
		case "developer_data":
			if in.IsNull() {
				in.Skip()
				out.DeveloperData = nil
			} else {
				if out.DeveloperData == nil {
					out.DeveloperData = new(DeveloperDataItem)
				}
				easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types16(in, out.DeveloperData)
			}
		case "public_interest_stats":
			if in.IsNull() {
				in.Skip()
				out.PublicInterest = nil
			} else {
				if out.PublicInterest == nil {
					out.PublicInterest = new(PublicInterestItem)
				}
				easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types17(in, out.PublicInterest)
			}
		case "id":
			out.ID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types12(out *jwriter.Writer, in CoinsIDHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"localization\":"
		out.RawString(prefix[1:])
		if in.Localization == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v38First := true
			for v38Name, v38Value := range in.Localization {
				if v38First {
					v38First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v38Name))
				out.RawByte(':')
				out.String(string(v38Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types13(out, in.Image)
	}
	{
		const prefix string = ",\"market_data\":"
		out.RawString(prefix)
		if in.MarketData == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types14(out, *in.MarketData)
		}
	}
	{
		const prefix string = ",\"community_data\":"
		out.RawString(prefix)
		if in.CommunityData == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types15(out, *in.CommunityData)
		}
	}
	{
		const prefix string = ",\"developer_data\":"
		out.RawString(prefix)
		if in.DeveloperData == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types16(out, *in.DeveloperData)
		}
	}
	{
		const prefix string = ",\"public_interest_stats\":"
		out.RawString(prefix)
		if in.PublicInterest == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types17(out, *in.PublicInterest)
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CoinsIDHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CoinsIDHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CoinsIDHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CoinsIDHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types12(l, v)
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types17(in *jlexer.Lexer, out *PublicInterestItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alexa_rank":
			out.AlexaRank = uint(in.Uint())
		case "bing_matches":
			out.BingMatches = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types17(out *jwriter.Writer, in PublicInterestItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alexa_rank\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.AlexaRank))
	}
	{
		const prefix string = ",\"bing_matches\":"
		out.RawString(prefix)
		out.Uint(uint(in.BingMatches))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types16(in *jlexer.Lexer, out *DeveloperDataItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "forks":
			if in.IsNull() {
				in.Skip()
				out.Forks = nil
			} else {
				if out.Forks == nil {
					out.Forks = new(uint)
				}
				*out.Forks = uint(in.Uint())
			}
		case "stars":
			if in.IsNull() {
				in.Skip()
				out.Stars = nil
			} else {
				if out.Stars == nil {
					out.Stars = new(uint)
				}
				*out.Stars = uint(in.Uint())
			}
		case "subscribers":
			if in.IsNull() {
				in.Skip()
				out.Subscribers = nil
			} else {
				if out.Subscribers == nil {
					out.Subscribers = new(uint)
				}
				*out.Subscribers = uint(in.Uint())
			}
		case "total_issues":
			if in.IsNull() {
				in.Skip()
				out.TotalIssues = nil
			} else {
				if out.TotalIssues == nil {
					out.TotalIssues = new(uint)
				}
				*out.TotalIssues = uint(in.Uint())
			}
		case "closed_issues":
			if in.IsNull() {
				in.Skip()
				out.ClosedIssues = nil
			} else {
				if out.ClosedIssues == nil {
					out.ClosedIssues = new(uint)
				}
				*out.ClosedIssues = uint(in.Uint())
			}
		case "pull_requests_merged":
			if in.IsNull() {
				in.Skip()
				out.PRMerged = nil
			} else {
				if out.PRMerged == nil {
					out.PRMerged = new(uint)
				}
				*out.PRMerged = uint(in.Uint())
			}
		case "pull_request_contributors":
			if in.IsNull() {
				in.Skip()
				out.PRContributors = nil
			} else {
				if out.PRContributors == nil {
					out.PRContributors = new(uint)
				}
				*out.PRContributors = uint(in.Uint())
			}
		case "commit_count_4_weeks":
			if in.IsNull() {
				in.Skip()
				out.CommitsCount4Weeks = nil
			} else {
				if out.CommitsCount4Weeks == nil {
					out.CommitsCount4Weeks = new(uint)
				}
				*out.CommitsCount4Weeks = uint(in.Uint())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types16(out *jwriter.Writer, in DeveloperDataItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"forks\":"
		out.RawString(prefix[1:])
		if in.Forks == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.Forks))
		}
	}
	{
		const prefix string = ",\"stars\":"
		out.RawString(prefix)
		if in.Stars == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.Stars))
		}
	}
	{
		const prefix string = ",\"subscribers\":"
		out.RawString(prefix)
		if in.Subscribers == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.Subscribers))
		}
	}
	{
		const prefix string = ",\"total_issues\":"
		out.RawString(prefix)
		if in.TotalIssues == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.TotalIssues))
		}
	}
	{
		const prefix string = ",\"closed_issues\":"
		out.RawString(prefix)
		if in.ClosedIssues == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.ClosedIssues))
		}
	}
	{
		const prefix string = ",\"pull_requests_merged\":"
		out.RawString(prefix)
		if in.PRMerged == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.PRMerged))
		}
	}
	{
		const prefix string = ",\"pull_request_contributors\":"
		out.RawString(prefix)
		if in.PRContributors == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.PRContributors))
		}
	}
	{
		const prefix string = ",\"commit_count_4_weeks\":"
		out.RawString(prefix)
		if in.CommitsCount4Weeks == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.CommitsCount4Weeks))
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types15(in *jlexer.Lexer, out *CommunityDataItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "facebook_likes":
			if in.IsNull() {
				in.Skip()
				out.FacebookLikes = nil
			} else {
				if out.FacebookLikes == nil {
					out.FacebookLikes = new(uint)
				}
				*out.FacebookLikes = uint(in.Uint())
			}
		case "twitter_followers":
			if in.IsNull() {
				in.Skip()
				out.TwitterFollowers = nil
			} else {
				if out.TwitterFollowers == nil {
					out.TwitterFollowers = new(uint)
				}
				*out.TwitterFollowers = uint(in.Uint())
			}
		case "reddit_average_posts_48h":
			if in.IsNull() {
				in.Skip()
				out.RedditAveragePosts48h = nil
			} else {
				if out.RedditAveragePosts48h == nil {
					out.RedditAveragePosts48h = new(float64)
				}
				*out.RedditAveragePosts48h = float64(in.Float64())
			}
		case "reddit_average_comments_48h":
			if in.IsNull() {
				in.Skip()
				out.RedditAverageComments48h = nil
			} else {
				if out.RedditAverageComments48h == nil {
					out.RedditAverageComments48h = new(float64)
				}
				*out.RedditAverageComments48h = float64(in.Float64())
			}
		case "reddit_subscribers":
			if in.IsNull() {
				in.Skip()
				out.RedditSubscribers = nil
			} else {
				if out.RedditSubscribers == nil {
					out.RedditSubscribers = new(uint)
				}
				*out.RedditSubscribers = uint(in.Uint())
			}
		case "telegram_channel_user_count":
			if in.IsNull() {
				in.Skip()
				out.TelegramChannelUserCount = nil
			} else {
				if out.TelegramChannelUserCount == nil {
					out.TelegramChannelUserCount = new(uint)
				}
				*out.TelegramChannelUserCount = uint(in.Uint())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types15(out *jwriter.Writer, in CommunityDataItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"facebook_likes\":"
		out.RawString(prefix[1:])
		if in.FacebookLikes == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.FacebookLikes))
		}
	}
	{
		const prefix string = ",\"twitter_followers\":"
		out.RawString(prefix)
		if in.TwitterFollowers == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.TwitterFollowers))
		}
	}
	{
		const prefix string = ",\"reddit_average_posts_48h\":"
		out.RawString(prefix)
		if in.RedditAveragePosts48h == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.RedditAveragePosts48h))
		}
	}
	{
		const prefix string = ",\"reddit_average_comments_48h\":"
		out.RawString(prefix)
		if in.RedditAverageComments48h == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.RedditAverageComments48h))
		}
	}
	{
		const prefix string = ",\"reddit_subscribers\":"
		out.RawString(prefix)
		if in.RedditSubscribers == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.RedditSubscribers))
		}
	}
	{
		const prefix string = ",\"telegram_channel_user_count\":"
		out.RawString(prefix)
		if in.TelegramChannelUserCount == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.TelegramChannelUserCount))
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types14(in *jlexer.Lexer, out *MarketDataItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "current_price":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.CurrentPrice = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v39 float64
					v39 = float64(in.Float64())
					(out.CurrentPrice)[key] = v39
					in.WantComma()
				}
				in.Delim('}')
			}
		case "roi":
			if in.IsNull() {
				in.Skip()
				out.ROI = nil
			} else {
				if out.ROI == nil {
					out.ROI = new(ROIItem)
				}
				easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types18(in, out.ROI)
			}
		case "ath":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ATH = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v40 float64
					v40 = float64(in.Float64())
					(out.ATH)[key] = v40
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ath_change_percentage":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ATHChangePercentage = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v41 float64
					v41 = float64(in.Float64())
					(out.ATHChangePercentage)[key] = v41
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ath_date":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ATHDate = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v42 string
					v42 = string(in.String())
					(out.ATHDate)[key] = v42
					in.WantComma()
				}
				in.Delim('}')
			}
		case "atl":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ATL = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v43 float64
					v43 = float64(in.Float64())
					(out.ATL)[key] = v43
					in.WantComma()
				}
				in.Delim('}')
			}
		case "atl_change_percentage":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ATLChangePercentage = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v44 float64
					v44 = float64(in.Float64())
					(out.ATLChangePercentage)[key] = v44
					in.WantComma()
				}
				in.Delim('}')
			}
		case "atl_date":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ATLDate = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v45 string
					v45 = string(in.String())
					(out.ATLDate)[key] = v45
					in.WantComma()
				}
				in.Delim('}')
			}
		case "market_cap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MarketCap = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v46 float64
					v46 = float64(in.Float64())
					(out.MarketCap)[key] = v46
					in.WantComma()
				}
				in.Delim('}')
			}
		case "market_cap_rank":
			out.MarketCapRank = uint16(in.Uint16())
		case "total_volume":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TotalVolume = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v47 float64
					v47 = float64(in.Float64())
					(out.TotalVolume)[key] = v47
					in.WantComma()
				}
				in.Delim('}')
			}
		case "high_24h":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.High24 = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v48 float64
					v48 = float64(in.Float64())
					(out.High24)[key] = v48
					in.WantComma()
				}
				in.Delim('}')
			}
		case "low_24h":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Low24 = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v49 float64
					v49 = float64(in.Float64())
					(out.Low24)[key] = v49
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_24h":
			out.PriceChange24h = float64(in.Float64())
		case "price_change_percentage_24h":
			out.PriceChangePercentage24h = float64(in.Float64())
		case "price_change_percentage_7d":
			out.PriceChangePercentage7d = float64(in.Float64())
		case "price_change_percentage_14d":
			out.PriceChangePercentage14d = float64(in.Float64())
		case "price_change_percentage_30d":
			out.PriceChangePercentage30d = float64(in.Float64())
		case "price_change_percentage_60d":
			out.PriceChangePercentage60d = float64(in.Float64())
		case "price_change_percentage_200d":
			out.PriceChangePercentage200d = float64(in.Float64())
		case "price_change_percentage_1y":
			out.PriceChangePercentage1y = float64(in.Float64())
		case "market_cap_change_24h":
			out.MarketCapChange24h = float64(in.Float64())
		case "market_cap_change_percentage_24h":
			out.MarketCapChangePercentage24h = float64(in.Float64())
		case "price_change_24h_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChange24hInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v50 float64
					v50 = float64(in.Float64())
					(out.PriceChange24hInCurrency)[key] = v50
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_1h_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage1hInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v51 float64
					v51 = float64(in.Float64())
					(out.PriceChangePercentage1hInCurrency)[key] = v51
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_24h_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage24hInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v52 float64
					v52 = float64(in.Float64())
					(out.PriceChangePercentage24hInCurrency)[key] = v52
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_7d_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage7dInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v53 float64
					v53 = float64(in.Float64())
					(out.PriceChangePercentage7dInCurrency)[key] = v53
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_14d_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage14dInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v54 float64
					v54 = float64(in.Float64())
					(out.PriceChangePercentage14dInCurrency)[key] = v54
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_30d_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage30dInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v55 float64
					v55 = float64(in.Float64())
					(out.PriceChangePercentage30dInCurrency)[key] = v55
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_60d_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage60dInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v56 float64
					v56 = float64(in.Float64())
					(out.PriceChangePercentage60dInCurrency)[key] = v56
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_200d_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage200dInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v57 float64
					v57 = float64(in.Float64())
					(out.PriceChangePercentage200dInCurrency)[key] = v57
					in.WantComma()
				}
				in.Delim('}')
			}
		case "price_change_percentage_1y_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PriceChangePercentage1yInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v58 float64
					v58 = float64(in.Float64())
					(out.PriceChangePercentage1yInCurrency)[key] = v58
					in.WantComma()
				}
				in.Delim('}')
			}
		case "market_cap_change_24h_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MarketCapChange24hInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v59 float64
					v59 = float64(in.Float64())
					(out.MarketCapChange24hInCurrency)[key] = v59
					in.WantComma()
				}
				in.Delim('}')
			}
		case "market_cap_change_percentage_24h_in_currency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MarketCapChangePercentage24hInCurrency = make(AllCurrencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v60 float64
					v60 = float64(in.Float64())
					(out.MarketCapChangePercentage24hInCurrency)[key] = v60
					in.WantComma()
				}
				in.Delim('}')
			}
		case "total_supply":
			if in.IsNull() {
				in.Skip()
				out.TotalSupply = nil
			} else {
				if out.TotalSupply == nil {
					out.TotalSupply = new(float64)
				}
				*out.TotalSupply = float64(in.Float64())
			}
		case "circulating_supply":
			out.CirculatingSupply = float64(in.Float64())
		case "sparkline_7d":
			if in.IsNull() {
				in.Skip()
				out.Sparkline = nil
			} else {
				if out.Sparkline == nil {
					out.Sparkline = new(SparklineItem)
				}
				easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types19(in, out.Sparkline)
			}
		case "last_updated":
			out.LastUpdated = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types14(out *jwriter.Writer, in MarketDataItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"current_price\":"
		out.RawString(prefix[1:])
		if in.CurrentPrice == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v61First := true
			for v61Name, v61Value := range in.CurrentPrice {
				if v61First {
					v61First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v61Name))
				out.RawByte(':')
				out.Float64(float64(v61Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"roi\":"
		out.RawString(prefix)
		if in.ROI == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types18(out, *in.ROI)
		}
	}
	{
		const prefix string = ",\"ath\":"
		out.RawString(prefix)
		if in.ATH == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v62First := true
			for v62Name, v62Value := range in.ATH {
				if v62First {
					v62First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v62Name))
				out.RawByte(':')
				out.Float64(float64(v62Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"ath_change_percentage\":"
		out.RawString(prefix)
		if in.ATHChangePercentage == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v63First := true
			for v63Name, v63Value := range in.ATHChangePercentage {
				if v63First {
					v63First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v63Name))
				out.RawByte(':')
				out.Float64(float64(v63Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"ath_date\":"
		out.RawString(prefix)
		if in.ATHDate == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v64First := true
			for v64Name, v64Value := range in.ATHDate {
				if v64First {
					v64First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v64Name))
				out.RawByte(':')
				out.String(string(v64Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"atl\":"
		out.RawString(prefix)
		if in.ATL == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v65First := true
			for v65Name, v65Value := range in.ATL {
				if v65First {
					v65First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v65Name))
				out.RawByte(':')
				out.Float64(float64(v65Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"atl_change_percentage\":"
		out.RawString(prefix)
		if in.ATLChangePercentage == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v66First := true
			for v66Name, v66Value := range in.ATLChangePercentage {
				if v66First {
					v66First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v66Name))
				out.RawByte(':')
				out.Float64(float64(v66Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"atl_date\":"
		out.RawString(prefix)
		if in.ATLDate == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v67First := true
			for v67Name, v67Value := range in.ATLDate {
				if v67First {
					v67First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v67Name))
				out.RawByte(':')
				out.String(string(v67Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"market_cap\":"
		out.RawString(prefix)
		if in.MarketCap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v68First := true
			for v68Name, v68Value := range in.MarketCap {
				if v68First {
					v68First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v68Name))
				out.RawByte(':')
				out.Float64(float64(v68Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"market_cap_rank\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.MarketCapRank))
	}
	{
		const prefix string = ",\"total_volume\":"
		out.RawString(prefix)
		if in.TotalVolume == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v69First := true
			for v69Name, v69Value := range in.TotalVolume {
				if v69First {
					v69First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v69Name))
				out.RawByte(':')
				out.Float64(float64(v69Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"high_24h\":"
		out.RawString(prefix)
		if in.High24 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v70First := true
			for v70Name, v70Value := range in.High24 {
				if v70First {
					v70First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v70Name))
				out.RawByte(':')
				out.Float64(float64(v70Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"low_24h\":"
		out.RawString(prefix)
		if in.Low24 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v71First := true
			for v71Name, v71Value := range in.Low24 {
				if v71First {
					v71First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v71Name))
				out.RawByte(':')
				out.Float64(float64(v71Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChange24h))
	}
	{
		const prefix string = ",\"price_change_percentage_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage24h))
	}
	{
		const prefix string = ",\"price_change_percentage_7d\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage7d))
	}
	{
		const prefix string = ",\"price_change_percentage_14d\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage14d))
	}
	{
		const prefix string = ",\"price_change_percentage_30d\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage30d))
	}
	{
		const prefix string = ",\"price_change_percentage_60d\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage60d))
	}
	{
		const prefix string = ",\"price_change_percentage_200d\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage200d))
	}
	{
		const prefix string = ",\"price_change_percentage_1y\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceChangePercentage1y))
	}
	{
		const prefix string = ",\"market_cap_change_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.MarketCapChange24h))
	}
	{
		const prefix string = ",\"market_cap_change_percentage_24h\":"
		out.RawString(prefix)
		out.Float64(float64(in.MarketCapChangePercentage24h))
	}
	{
		const prefix string = ",\"price_change_24h_in_currency\":"
		out.RawString(prefix)
		if in.PriceChange24hInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v72First := true
			for v72Name, v72Value := range in.PriceChange24hInCurrency {
				if v72First {
					v72First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v72Name))
				out.RawByte(':')
				out.Float64(float64(v72Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_1h_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage1hInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v73First := true
			for v73Name, v73Value := range in.PriceChangePercentage1hInCurrency {
				if v73First {
					v73First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v73Name))
				out.RawByte(':')
				out.Float64(float64(v73Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_24h_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage24hInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v74First := true
			for v74Name, v74Value := range in.PriceChangePercentage24hInCurrency {
				if v74First {
					v74First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v74Name))
				out.RawByte(':')
				out.Float64(float64(v74Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_7d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage7dInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v75First := true
			for v75Name, v75Value := range in.PriceChangePercentage7dInCurrency {
				if v75First {
					v75First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v75Name))
				out.RawByte(':')
				out.Float64(float64(v75Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_14d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage14dInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v76First := true
			for v76Name, v76Value := range in.PriceChangePercentage14dInCurrency {
				if v76First {
					v76First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v76Name))
				out.RawByte(':')
				out.Float64(float64(v76Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_30d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage30dInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v77First := true
			for v77Name, v77Value := range in.PriceChangePercentage30dInCurrency {
				if v77First {
					v77First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v77Name))
				out.RawByte(':')
				out.Float64(float64(v77Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_60d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage60dInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v78First := true
			for v78Name, v78Value := range in.PriceChangePercentage60dInCurrency {
				if v78First {
					v78First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v78Name))
				out.RawByte(':')
				out.Float64(float64(v78Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_200d_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage200dInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v79First := true
			for v79Name, v79Value := range in.PriceChangePercentage200dInCurrency {
				if v79First {
					v79First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v79Name))
				out.RawByte(':')
				out.Float64(float64(v79Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"price_change_percentage_1y_in_currency\":"
		out.RawString(prefix)
		if in.PriceChangePercentage1yInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v80First := true
			for v80Name, v80Value := range in.PriceChangePercentage1yInCurrency {
				if v80First {
					v80First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v80Name))
				out.RawByte(':')
				out.Float64(float64(v80Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"market_cap_change_24h_in_currency\":"
		out.RawString(prefix)
		if in.MarketCapChange24hInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v81First := true
			for v81Name, v81Value := range in.MarketCapChange24hInCurrency {
				if v81First {
					v81First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v81Name))
				out.RawByte(':')
				out.Float64(float64(v81Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"market_cap_change_percentage_24h_in_currency\":"
		out.RawString(prefix)
		if in.MarketCapChangePercentage24hInCurrency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v82First := true
			for v82Name, v82Value := range in.MarketCapChangePercentage24hInCurrency {
				if v82First {
					v82First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v82Name))
				out.RawByte(':')
				out.Float64(float64(v82Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"total_supply\":"
		out.RawString(prefix)
		if in.TotalSupply == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.TotalSupply))
		}
	}
	{
		const prefix string = ",\"circulating_supply\":"
		out.RawString(prefix)
		out.Float64(float64(in.CirculatingSupply))
	}
	{
		const prefix string = ",\"sparkline_7d\":"
		out.RawString(prefix)
		if in.Sparkline == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types19(out, *in.Sparkline)
		}
	}
	{
		const prefix string = ",\"last_updated\":"
		out.RawString(prefix)
		out.String(string(in.LastUpdated))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types19(in *jlexer.Lexer, out *SparklineItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				in.Delim('[')
				if out.Price == nil {
					if !in.IsDelim(']') {
						out.Price = make([]float64, 0, 8)
					} else {
						out.Price = []float64{}
					}
				} else {
					out.Price = (out.Price)[:0]
				}
				for !in.IsDelim(']') {
					var v83 float64
					v83 = float64(in.Float64())
					out.Price = append(out.Price, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types19(out *jwriter.Writer, in SparklineItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		if in.Price == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v84, v85 := range in.Price {
				if v84 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v85))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types18(in *jlexer.Lexer, out *ROIItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "times":
			out.Times = float64(in.Float64())
		case "currency":
			out.Currency = string(in.String())
		case "percentage":
			out.Percentage = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types18(out *jwriter.Writer, in ROIItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"times\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Times))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"percentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.Percentage))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types13(in *jlexer.Lexer, out *ImageItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "thumb":
			out.Thumb = string(in.String())
		case "small":
			out.Small = string(in.String())
		case "large":
			out.Large = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types13(out *jwriter.Writer, in ImageItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"thumb\":"
		out.RawString(prefix[1:])
		out.String(string(in.Thumb))
	}
	{
		const prefix string = ",\"small\":"
		out.RawString(prefix)
		out.String(string(in.Small))
	}
	{
		const prefix string = ",\"large\":"
		out.RawString(prefix)
		out.String(string(in.Large))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types20(in *jlexer.Lexer, out *CoinsID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "block_time_in_minutes":
			out.BlockTimeInMin = int32(in.Int32())
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]string, 0, 4)
					} else {
						out.Categories = []string{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v86 string
					v86 = string(in.String())
					out.Categories = append(out.Categories, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "localization":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Localization = make(LocalizationItem)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v87 string
					v87 = string(in.String())
					(out.Localization)[key] = v87
					in.WantComma()
				}
				in.Delim('}')
			}
		case "description":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Description = make(DescriptionItem)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v88 string
					v88 = string(in.String())
					(out.Description)[key] = v88
					in.WantComma()
				}
				in.Delim('}')
			}
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				if out.Links == nil {
					out.Links = new(LinksItem)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					*out.Links = make(LinksItem)
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v89 interface{}
						if m, ok := v89.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v89.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v89 = in.Interface()
						}
						(*out.Links)[key] = v89
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "image":
			easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types13(in, &out.Image)
		case "country_origin":
			out.CountryOrigin = string(in.String())
		case "genesis_date":
			out.GenesisDate = string(in.String())
		case "market_cap_rank":
			out.MarketCapRank = uint16(in.Uint16())
		case "coingecko_rank":
			out.CoinGeckoRank = uint16(in.Uint16())
		case "coingecko_score":
			out.CoinGeckoScore = float32(in.Float32())
		case "developer_score":
			out.DeveloperScore = float32(in.Float32())
		case "community_score":
			out.CommunityScore = float32(in.Float32())
		case "liquidity_score":
			out.LiquidityScore = float32(in.Float32())
		case "public_interest_score":
			out.PublicInterestScore = float32(in.Float32())
		case "market_data":
			if in.IsNull() {
				in.Skip()
				out.MarketData = nil
			} else {
				if out.MarketData == nil {
					out.MarketData = new(MarketDataItem)
				}
				easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types14(in, out.MarketData)
			}
		case "community_data":
			if in.IsNull() {
				in.Skip()
				out.CommunityData = nil
			} else {
				if out.CommunityData == nil {
					out.CommunityData = new(CommunityDataItem)
				}
				easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types15(in, out.CommunityData)
			}
		case "developer_data":
			if in.IsNull() {
				in.Skip()
				out.DeveloperData = nil
			} else {
				if out.DeveloperData == nil {
					out.DeveloperData = new(DeveloperDataItem)
				}
				easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types16(in, out.DeveloperData)
			}
		case "public_interest_stats":
			if in.IsNull() {
				in.Skip()
				out.PublicInterestStats = nil
			} else {
				if out.PublicInterestStats == nil {
					out.PublicInterestStats = new(PublicInterestItem)
				}
				easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types17(in, out.PublicInterestStats)
			}
		case "status_updates":
			if in.IsNull() {
				in.Skip()
				out.StatusUpdates = nil
			} else {
				if out.StatusUpdates == nil {
					out.StatusUpdates = new([]StatusUpdateItem)
				}
				if in.IsNull() {
					in.Skip()
					*out.StatusUpdates = nil
				} else {
					in.Delim('[')
					if *out.StatusUpdates == nil {
						if !in.IsDelim(']') {
							*out.StatusUpdates = make([]StatusUpdateItem, 0, 0)
						} else {
							*out.StatusUpdates = []StatusUpdateItem{}
						}
					} else {
						*out.StatusUpdates = (*out.StatusUpdates)[:0]
					}
					for !in.IsDelim(']') {
						var v90 StatusUpdateItem
						easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types21(in, &v90)
						*out.StatusUpdates = append(*out.StatusUpdates, v90)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "last_updated":
			out.LastUpdated = string(in.String())
		case "tickers":
			if in.IsNull() {
				in.Skip()
				out.Tickers = nil
			} else {
				if out.Tickers == nil {
					out.Tickers = new([]TickerItem)
				}
				if in.IsNull() {
					in.Skip()
					*out.Tickers = nil
				} else {
					in.Delim('[')
					if *out.Tickers == nil {
						if !in.IsDelim(']') {
							*out.Tickers = make([]TickerItem, 0, 0)
						} else {
							*out.Tickers = []TickerItem{}
						}
					} else {
						*out.Tickers = (*out.Tickers)[:0]
					}
					for !in.IsDelim(']') {
						var v91 TickerItem
						easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types10(in, &v91)
						*out.Tickers = append(*out.Tickers, v91)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "id":
			out.ID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types20(out *jwriter.Writer, in CoinsID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"block_time_in_minutes\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.BlockTimeInMin))
	}
	{
		const prefix string = ",\"categories\":"
		out.RawString(prefix)
		if in.Categories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v92, v93 := range in.Categories {
				if v92 > 0 {
					out.RawByte(',')
				}
				out.String(string(v93))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"localization\":"
		out.RawString(prefix)
		if in.Localization == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v94First := true
			for v94Name, v94Value := range in.Localization {
				if v94First {
					v94First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v94Name))
				out.RawByte(':')
				out.String(string(v94Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v95First := true
			for v95Name, v95Value := range in.Description {
				if v95First {
					v95First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v95Name))
				out.RawByte(':')
				out.String(string(v95Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"links\":"
		out.RawString(prefix)
		if in.Links == nil {
			out.RawString("null")
		} else {
			if *in.Links == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v96First := true
				for v96Name, v96Value := range *in.Links {
					if v96First {
						v96First = false
					} else {
						out.RawByte(',')
					}
					out.String(string(v96Name))
					out.RawByte(':')
					if m, ok := v96Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v96Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v96Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types13(out, in.Image)
	}
	{
		const prefix string = ",\"country_origin\":"
		out.RawString(prefix)
		out.String(string(in.CountryOrigin))
	}
	{
		const prefix string = ",\"genesis_date\":"
		out.RawString(prefix)
		out.String(string(in.GenesisDate))
	}
	{
		const prefix string = ",\"market_cap_rank\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.MarketCapRank))
	}
	{
		const prefix string = ",\"coingecko_rank\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.CoinGeckoRank))
	}
	{
		const prefix string = ",\"coingecko_score\":"
		out.RawString(prefix)
		out.Float32(float32(in.CoinGeckoScore))
	}
	{
		const prefix string = ",\"developer_score\":"
		out.RawString(prefix)
		out.Float32(float32(in.DeveloperScore))
	}
	{
		const prefix string = ",\"community_score\":"
		out.RawString(prefix)
		out.Float32(float32(in.CommunityScore))
	}
	{
		const prefix string = ",\"liquidity_score\":"
		out.RawString(prefix)
		out.Float32(float32(in.LiquidityScore))
	}
	{
		const prefix string = ",\"public_interest_score\":"
		out.RawString(prefix)
		out.Float32(float32(in.PublicInterestScore))
	}
	{
		const prefix string = ",\"market_data\":"
		out.RawString(prefix)
		if in.MarketData == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types14(out, *in.MarketData)
		}
	}
	{
		const prefix string = ",\"community_data\":"
		out.RawString(prefix)
		if in.CommunityData == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types15(out, *in.CommunityData)
		}
	}
	{
		const prefix string = ",\"developer_data\":"
		out.RawString(prefix)
		if in.DeveloperData == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types16(out, *in.DeveloperData)
		}
	}
	{
		const prefix string = ",\"public_interest_stats\":"
		out.RawString(prefix)
		if in.PublicInterestStats == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types17(out, *in.PublicInterestStats)
		}
	}
	{
		const prefix string = ",\"status_updates\":"
		out.RawString(prefix)
		if in.StatusUpdates == nil {
			out.RawString("null")
		} else {
			if *in.StatusUpdates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v97, v98 := range *in.StatusUpdates {
					if v97 > 0 {
						out.RawByte(',')
					}
					easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types21(out, v98)
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"last_updated\":"
		out.RawString(prefix)
		out.String(string(in.LastUpdated))
	}
	{
		const prefix string = ",\"tickers\":"
		out.RawString(prefix)
		if in.Tickers == nil {
			out.RawString("null")
		} else {
			if *in.Tickers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v99, v100 := range *in.Tickers {
					if v99 > 0 {
						out.RawByte(',')
					}
					easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types10(out, v100)
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CoinsID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CoinsID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CoinsID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CoinsID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types20(l, v)
}
func easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types21(in *jlexer.Lexer, out *StatusUpdateItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "user":
			out.User = string(in.String())
		case "user_title":
			out.UserTitle = string(in.String())
		case "pin":
			out.Pin = bool(in.Bool())
		case "project":
			easyjson6601e8cdDecode1(in, &out.Project)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types21(out *jwriter.Writer, in StatusUpdateItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"user_title\":"
		out.RawString(prefix)
		out.String(string(in.UserTitle))
	}
	{
		const prefix string = ",\"pin\":"
		out.RawString(prefix)
		out.Bool(bool(in.Pin))
	}
	{
		const prefix string = ",\"project\":"
		out.RawString(prefix)
		easyjson6601e8cdEncode1(out, in.Project)
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode1(in *jlexer.Lexer, out *struct {
	coinBaseStruct
	Type  string    `json:"type"`
	Image ImageItem `json:"image"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "image":
			easyjson6601e8cdDecodeGithubComSuperoo7GoGeckoV3Types13(in, &out.Image)
		case "id":
			out.ID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode1(out *jwriter.Writer, in struct {
	coinBaseStruct
	Type  string    `json:"type"`
	Image ImageItem `json:"image"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		easyjson6601e8cdEncodeGithubComSuperoo7GoGeckoV3Types13(out, in.Image)
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
